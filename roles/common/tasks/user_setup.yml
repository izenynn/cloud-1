---
- name: "Merge users lists"
  tags:
    - users
  set_fact:
    users: "{{ default_users + additional_users | default([]) }}"

# ------------------------------------------------------------------------------
# USER MANAGEMENT
# ------------------------------------------------------------------------------

- name: "Create users"
  tags:
    - users
  user:
    name: "{{ item.username }}"
    state: present
    password: "{{ (item.password | default('') | password_hash('sha512')) if item.password is defined else omit }}"
    update_password: on_create
    create_home: "{{ item.create_home | default(true) | bool }}"
  no_log: "{{ ansible_verbosity < 1 }}"
  with_items: "{{ users }}"

- name: "Set or update users passwords (Skipped by default)"
  tags:
    - users
  user:
    name: "{{ item.username }}"
    password: "{{ (item.password | default('') | password_hash('sha512')) if item.password is defined else omit }}"
    update_password: always
    create_home: false
  no_log: "{{ ansible_verbosity < 1 }}"
  when: item.password is defined and (update_passwords | default(false) | bool)
  with_items: "{{ users }}"

# ------------------------------------------------------------------------------
# USER SHELL
# ------------------------------------------------------------------------------

- name: "Set users shells"
  tags:
    - users
  user:
    name: "{{ item.username }}"
    shell: "{{ item.shell | default(default_user_shell) }}"
    create_home: false
  no_log: "{{ ansible_verbosity < 1 }}"
  with_items: "{{ users }}"

# ------------------------------------------------------------------------------
# SSH AUTHORIZED KEY
# ------------------------------------------------------------------------------

- name: "Create home for users with authorized key"
  tags:
    - users
  user:
    name: "{{ item.username }}"
    create_home: true
  no_log: "{{ ansible_verbosity < 1 }}"
  when:
    - item.authorized_key is defined
    - not ansible_facts.users[item.username].home is defined
  with_items: "{{ users }}"

- name: "Set users SSH authorized keys"
  tags:
    - users
  authorized_key:
    user: "{{ item.username }}"
    key: "{{ item.authorized_key }}"
    state: present
    exclusive: false
  no_log: "{{ ansible_verbosity < 1 }}"
  when: item.authorized_key is defined
  with_items: "{{ users }}"

# ------------------------------------------------------------------------------
# CREATE ANSIBLE REMOTE_TMP DIR FOR DEFAULT_USERS
# ------------------------------------------------------------------------------

- name: "Ensure correct state of remote_tmp directory for default users"
  file:
    path: "/home/{{ item.username }}/.ansible/tmp"
    state: directory
    owner: "{{ item.username }}"
    group: "{{ item.username }}"
    mode: '0755'
  no_log: "{{ ansible_verbosity < 1 }}"
  when: item.create_home | default(true) | bool
  with_items: "{{ default_users }}"

# ------------------------------------------------------------------------------
# SUDO & SUDOERS
# ------------------------------------------------------------------------------

- name: "Add specified users to sudo group"
  tags:
    - users
  user:
    name: "{{ item.username }}"
    groups: sudo
    append: true
    create_home: false
  no_log: "{{ ansible_verbosity < 1 }}"
  when: item.is_sudo | default(false)
  with_items: "{{ users }}"

- name: "Add sudoers file for passwordless sudo users"
  tags:
    - users
  copy:
    dest: "/etc/sudoers.d/50-user-{{ item.username }}"
    content: "{{ item.username }} ALL=(ALL) NOPASSWD:ALL\n"
    validate: 'visudo -cf %s'
    owner: root
    group: root
    mode: 0440
  no_log: "{{ ansible_verbosity < 1 }}"
  when: item.is_sudo_nopasswd | default(false)
  with_items: "{{ users }}"
